#version 330 core

out vec3 color;

in vec2 v_texCoord;
in vec3 v_normal;
in vec3 v_fragPos;
flat in vec3 v_color;

uniform sampler2D	u_Texture;
uniform vec3		u_viewPos;
uniform vec3		u_lightSwitch;
uniform int			u_state;
uniform float		u_smooth;

struct Material {
    sampler2D diffuse;
    vec3 specular;
    float shininess;
}; 
uniform Material material;

struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform DirLight dirLight;

struct PointLight {    
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform PointLight pointLight;

struct SpotLight {    
	vec3 direction;
	float cutoff;
	float outerCutoff;
	float constant;
    float linear;
    float quadratic;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform SpotLight spotLight;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 ambient = vec3(texture(material.diffuse, v_texCoord)) * light.ambient;
	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec3 diffuse = (diff * vec3(texture(material.diffuse, v_texCoord))) * light.diffuse;	
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (material.specular * spec) * light.specular;
	return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 ambient = vec3(texture(material.diffuse, v_texCoord)) * light.ambient;
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec3 diffuse = (diff * vec3(texture(material.diffuse, v_texCoord))) * light.diffuse;	
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (material.specular * spec) * light.specular;
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 u_viewPos)
{
	vec3 ambient = vec3(texture(material.diffuse, v_texCoord)) * light.ambient;
	vec3 lightDir = normalize(u_viewPos - fragPos);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec3 diffuse = (diff * vec3(texture(material.diffuse, v_texCoord))) * light.diffuse;	
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (material.specular * spec) * light.specular;
	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon   = light.cutoff - light.outerCutoff;
	float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);
	diffuse  *= intensity;
    specular *= intensity;
    float distance    = length(u_viewPos - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    ambient  *= attenuation; 
    diffuse   *= attenuation;
    specular *= attenuation;
	return (ambient + diffuse + specular);
}

void main()
{
	vec3 norm = normalize(v_normal);
	vec3 viewDir = normalize(u_viewPos - v_fragPos);
	vec3 result;
	if (u_state == 3)
		result = vec3(0.5f, 0.4f, 0.8f) + norm;
	else if (u_state == 0)
		result = v_color;
	else if (u_state == 2)
		result = vec3(0.3 + (v_color * vec3(0.3, 0.3, 0.3)).x, 0.3 + (v_color * vec3(0.3, 0.3, 0.3)).x, 0.3 + (v_color * vec3(0.3, 0.3, 0.3)).x);
	else if (u_state == 1)
	{
		result = v_color * u_smooth + (1 - u_smooth) * vec3(texture(material.diffuse, v_texCoord));
	}
	else
	{
		result = vec3(texture(material.diffuse, v_texCoord)) * 0.05;
		if (u_lightSwitch.x == 1.0f)
			result += CalcDirLight(dirLight, norm, viewDir);
		if (u_lightSwitch.y == 1.0f)
			result += CalcPointLight(pointLight, norm, v_fragPos, viewDir);
		if (u_lightSwitch.z == 1.0f)
			result += CalcSpotLight(spotLight, norm, v_fragPos, viewDir, u_viewPos);
	}
	color = result;
}